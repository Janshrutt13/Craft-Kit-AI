"use client"

import type { Block } from "./types"

const indent = (lvl: number) => "  ".repeat(lvl)

function attrs(props: Record<string, any> = {}) {
  const entries = Object.entries(props).filter(([_, v]) => v !== undefined && v !== null && v !== "")
  if (entries.length === 0) return ""
  return (
    " " +
    entries
      .map(([k, v]) => {
        if (k === "className") return `className="${v}"`
        if (k === "children") return ""
        if (typeof v === "string") return `${k}="${v}"`
        if (typeof v === "boolean") return v ? k : ""
        return `${k}={${JSON.stringify(v)}}`
      })
      .filter(Boolean)
      .join(" ")
  )
}

function renderNode(node: Block, level = 2): string {
  const p = node.props || {}
  switch (node.type) {
    case "section":
      return `${indent(level)}<section${attrs({ className: p.className || "py-12" })}>
${(node.children || []).map((c) => renderNode(c, level + 1)).join("\n")}
${indent(level)}</section>`
    case "container":
      return `${indent(level)}<div${attrs({ className: p.className || "mx-auto max-w-4xl px-4" })}>
${(node.children || []).map((c) => renderNode(c, level + 1)).join("\n")}
${indent(level)}</div>`
    case "heading":
      return `${indent(level)}<h2${attrs({ className: p.className || "text-3xl font-semibold", children: undefined })}>${p.text || "Heading"}</h2>`
    case "paragraph":
      return `${indent(level)}<p${attrs({ className: p.className || "text-base leading-relaxed text-pretty", children: undefined })}>${p.text || "Lorem ipsum dolor sit amet."}</p>`
    case "button":
      return `${indent(level)}<button${attrs({ className: p.className || "inline-flex items-center rounded-md px-4 py-2 font-medium", type: p.type || "button" })}>${p.text || "Click me"}</button>`
    case "image":
      return `${indent(level)}<img${attrs({ src: p.src || "/a-placeholder-image.png", alt: p.alt || "Image", className: p.className || "rounded-md" })} />`
    case "input":
      return `${indent(level)}<input${attrs({ type: p.type || "text", placeholder: p.placeholder || "Type here", className: p.className || "w-full rounded-md px-3 py-2" })} />`
    case "form":
      return `${indent(level)}<form${attrs({ className: p.className || "grid gap-4" })}>
${(node.children || []).map((c) => renderNode(c, level + 1)).join("\n")}
${indent(level)}</form>`
    case "card":
      return `${indent(level)}<div${attrs({ className: p.className || "rounded-lg border p-6" })}>
${(node.children || []).map((c) => renderNode(c, level + 1)).join("\n")}
${indent(level)}</div>`
    case "list":
      return `${indent(level)}<ul${attrs({ className: p.className || "list-disc pl-6 space-y-1" })}>
${(node.children || []).map((c) => `${indent(level + 1)}<li>${c.props?.text || "Item"}</li>`).join("\n")}
${indent(level)}</ul>`
    default:
      return `${indent(level)}<div />`
  }
}

export function generatePageTSX(name: string, root: Block) {
  const body = renderNode(root, 2)
  return `/* Auto-generated by Studio */\nexport default function ${toComponentName(name)}() {\n  return (\n    <main className="min-h-dvh py-12">\n${body}\n    </main>\n  )\n}\n`
}

function toComponentName(name: string) {
  const cleaned = (name || "Generated Page")
    .replace(/[^a-zA-Z0-9]+/g, " ")
    .trim()
    .split(" ")
    .map((w) => w.charAt(0).toUpperCase() + w.slice(1))
    .join("")
  return cleaned || "GeneratedPage"
}
